        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Card test for the village function
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5://Function to check if a test passed or failed
        3:    6:void Pass_Fail(int check)
        -:    7:{
        3:    8:	if(check == 0)
        -:    9:	{
        2:   10:		printf(" Test PASSED succesfuly!\n");
        -:   11:	}
        -:   12:	else
        1:   13:		printf(" TEST FAILED\n");
        3:   14:}
        -:   15:
        -:   16://Function for a unit test for the village card
        1:   17:void Vill()
        -:   18:{
        -:   19://Random seed
        1:   20:int seed = 500;
        -:   21:struct gameState game;
        -:   22://Cards used for initialization
        1:   23:int cards[27] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};
        -:   24://Initialize the game
        1:   25:initializeGame(2, cards, seed, &game);
        -:   26:
        1:   27:	printf("\n\nCARD TEST 3 VILLAGE-------------------------------\n\n");
        -:   28:	//Chec the players number of actions and hand count and store them in temps to be used for comparisons later
        1:   29:	printf("\nCheck to see how many actions and cards the player has initially\n");
        1:   30:	printf("\n Player actions:%d\n", game.numActions);
        1:   31:	int temp1 = game.numActions;
        1:   32:	int temp2 = game.handCount[1];
        1:   33:	printf("\n Player cards:%d\n", game.handCount[1]);
        -:   34:	//Run our Village function and make sure it was succseful
        1:   35:	printf("\nCheck to see if the Village function runs succesfully\n");
        1:   36:	int rand = village_func(1, &game, 0);
        1:   37:	Pass_Fail(rand);
        -:   38:	//Get our new hand count and action values
        1:   39:	printf("\nCheck to see how many actions and cards the player has after function call (player cards should not increase/decrease because the Village card will get discarded, number of actions should increase by 2 :\n");
        1:   40:	printf("\n Player actions:%d\n", game.numActions);
        -:   41:	//Compare our old hand count and action values to the new ones and print an error if they are incorrect
        1:   42:	if(game.numActions > temp1 + 2)
        -:   43:	{
    #####:   44:	Pass_Fail(1);
        -:   45:	}
        -:   46:	else
        1:   47:	Pass_Fail(0);
        -:   48:	//Compare our old hand count and action values to the new ones and print an error if they are incorrect
        -:   49:	
        1:   50:	printf("\n Player cards:%d\n", game.handCount[1]);
        1:   51:	if(game.handCount[1] < temp2)
        -:   52:	{
        1:   53:	Pass_Fail(1);
        -:   54:	}	
        -:   55:	else
    #####:   56:	Pass_Fail(0);
        -:   57:	
        1:   58:	printf("\n\nCARD TEST 3 VILLAGE END------------------------------\n\n");
        1:   59:}
        -:   60:
        1:   61:int main()
        -:   62:{
        1:   63:Vill();
        1:   64:return 0;
        -:   65:}
