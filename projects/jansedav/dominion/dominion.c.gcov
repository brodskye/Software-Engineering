        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      368:    8:int compare(const void* a, const void* b) {
      368:    9:  if (*(int*)a > *(int*)b)
       40:   10:    return 1;
      328:   11:  if (*(int*)a < *(int*)b)
       73:   12:    return -1;
      255:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:  //set number of Victory cards
        8:   86:  if (numPlayers == 2)
        -:   87:    {
        8:   88:      state->supplyCount[estate] = 8;
        8:   89:      state->supplyCount[duchy] = 8;
        8:   90:      state->supplyCount[province] = 8;
        -:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[estate] = 12;
    #####:   95:      state->supplyCount[duchy] = 12;
    #####:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        8:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  101:  state->supplyCount[silver] = 40;
        8:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      168:  105:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  106:    {
     1712:  107:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  108:	{
     1576:  109:	  if (kingdomCards[j] == i)
        -:  110:	    {
        -:  111:	      //check if card is a 'Victory' Kingdom card
       24:  112:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:		{
    #####:  114:		  if (numPlayers == 2){ 
    #####:  115:		    state->supplyCount[i] = 8; 
        -:  116:		  }
    #####:  117:		  else{ state->supplyCount[i] = 12; }
        -:  118:		}
        -:  119:	      else
        -:  120:		{
       24:  121:		  state->supplyCount[i] = 10;
        -:  122:		}
       24:  123:	      break;
        -:  124:	    }
        -:  125:	  else    //card is not in the set choosen for the game
        -:  126:	    {
     1552:  127:	      state->supplyCount[i] = -1;
        -:  128:	    }
        -:  129:	}
        -:  130:
        -:  131:    }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       24:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:    {
       16:  139:      state->deckCount[i] = 0;
       64:  140:      for (j = 0; j < 3; j++)
        -:  141:	{
       48:  142:	  state->deck[i][j] = estate;
       48:  143:	  state->deckCount[i]++;
        -:  144:	}
      128:  145:      for (j = 3; j < 10; j++)
        -:  146:	{
      112:  147:	  state->deck[i][j] = copper;
      112:  148:	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
       24:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
       16:  155:      if ( shuffle(i, state) < 0 )
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
       24:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       16:  165:      state->handCount[i] = 0;
       16:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      224:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
      216:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
        8:  181:  state->outpostPlayed = 0;
        8:  182:  state->phase = 0;
        8:  183:  state->numActions = 1;
        8:  184:  state->numBuys = 1;
        8:  185:  state->playedCardCount = 0;
        8:  186:  state->whoseTurn = 0;
        8:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       48:  191:  for (it = 0; it < 5; it++){
       40:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
        8:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        8:  197:  return 0;
        -:  198:}
        -:  199:
       31:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       31:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       31:  208:  if (state->deckCount[player] < 1)
        7:  209:    return -1;
       24:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      278:  213:  while (state->deckCount[player] > 0) {
      230:  214:    card = floor(Random() * state->deckCount[player]);
      230:  215:    newDeck[newDeckPos] = state->deck[player][card];
      230:  216:    newDeckPos++;
      739:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      509:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
      230:  220:    state->deckCount[player]--;
        -:  221:  }
      254:  222:  for (i = 0; i < newDeckPos; i++) {
      230:  223:    state->deck[player][i] = newDeck[i];
      230:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
       24:  227:  return 0;
        -:  228:}
        -:  229:
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:	
    #####:  268:  return 0;
        -:  269:}
        -:  270:
        4:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        -:  308:}
        -:  309:
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        4:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
       18:  345:int whoseTurn(struct gameState *state) {
       18:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
       14:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
       14:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
       84:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       70:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       70:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
       14:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
       14:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
        7:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
        7:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
       14:  369:  state->outpostPlayed = 0;
       14:  370:  state->phase = 0;
       14:  371:  state->numActions = 1;
       14:  372:  state->coins = 0;
       14:  373:  state->numBuys = 1;
       14:  374:  state->playedCardCount = 0;
       14:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
       84:  379:  for (k = 0; k < 5; k++){
       70:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
       14:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
       14:  386:  return 0;
        -:  387:}
        -:  388:
        3:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
        3:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
        1:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
        2:  400:  j = 0;
       52:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
       50:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
        3:  405:	  j++;
        -:  406:	}
        -:  407:    }
        2:  408:  if ( j >= 3)
        -:  409:    {
        1:  410:      return 1;
        -:  411:    }
        -:  412:
        1:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
      116:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
      116:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       55:  532:    for (i = 0; i < state->discardCount[player];i++){
       50:  533:      state->deck[player][i] = state->discard[player][i];
       50:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
        5:  537:    state->deckCount[player] = state->discardCount[player];
        5:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        5:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        5:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        5:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        5:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        5:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
        5:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  562:    state->deckCount[player]--;
        5:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
      111:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
      111:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
      111:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      111:  575:    state->deckCount[player]--;
      111:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
      116:  579:  return 0;
        -:  580:}
        -:  581:
        3:  582:int getCost(int cardNumber)
        -:  583:{
        3:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
        3:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        -:  645://Function for the adventurer switch statement inside of cardEffect
        1:  646:int adventurer_func(int *drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        -:  647:{
        3:  648:      while(*drawntreasure<2){
        1:  649:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  650:	  shuffle(currentPlayer, state);
        -:  651:	}
        1:  652:	drawCard(currentPlayer, state);
        1:  653:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  654:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  655:	{
        1:  656:	  *drawntreasure = *drawntreasure + 1;
        1:  657:	 *drawntreasure = *drawntreasure + 1; //Here is the bug I introduced that makes it so drawntreasure increases by 1 too many.
        -:  658:	}
        -:  659:	else{
    #####:  660:	  temphand[z]=cardDrawn;
    #####:  661:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  662:	  z++;
        -:  663:	}
        -:  664:      }
        2:  665:      while(z-1>=0){
    #####:  666:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  667:	z=z-1;
        -:  668:      }
        1:  669:      return 0;
        -:  670:
        -:  671:}
        -:  672:
        -:  673://Function for the smithy switch statement inside of cardEffect
        1:  674:int smithy_func(int currentPlayer, struct gameState *state, int handPos)
        -:  675:{
        -:  676:      //+3 Cards
        -:  677:	  int i;
        -:  678:	  //Here is the bug where the player draws 1 too many cards
        5:  679:      for (i = 0; i < 4; i++)
        -:  680:	{
        4:  681:	  drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:			
        -:  684:      //discard card from hand
        1:  685:      discardCard(handPos, currentPlayer, state, 0);
        1:  686:      return 0;
        -:  687:}
        -:  688:
        -:  689://Function for the village switch statement inside of cardEffect
        1:  690:int village_func(int currentPlayer, struct gameState *state, int handPos)
        -:  691:{
        -:  692:      //+1 Card
        -:  693:	  //commented out the drawCard call in order to introduce a bug.
        -:  694:    //  drawCard(currentPlayer, state);
        -:  695:			
        -:  696:      //+2 Actions
        1:  697:      state->numActions = state->numActions + 2;
        -:  698:			
        -:  699:      //discard played card from hand
        1:  700:      discardCard(handPos, currentPlayer, state, 0);
        1:  701:      return 0;
        -:  702:}
        -:  703:
        -:  704://Function for the greathall switch statement inside of cardEffect
        1:  705:int greathall_func(int currentPlayer, struct gameState *state, int handPos)
        -:  706:{
        -:  707:      //+1 Card
        1:  708:      drawCard(currentPlayer, state);
        -:  709:			
        -:  710:      //+1 Actions
        1:  711:      state->numActions++;
        -:  712:			
        -:  713:      //discard card from hand
        -:  714:	  //Commented out the discardCard call in order to create a bug
        -:  715:      //discardCard(handPos, currentPlayer, state, 0);
        1:  716:      return 0;
        -:  717:}
        -:  718:
        -:  719:
        -:  720://Function for the cutpurse switch statement inside of cardEffect
    #####:  721:int cutpurse_func(int currentPlayer, struct gameState *state, int handPos, int k)
        -:  722:{
        -:  723:int i, j;
    #####:  724:updateCoins(currentPlayer, state, 2);
    #####:  725:      for (i = 0; i < state->numPlayers; i++)
        -:  726:	{
    #####:  727:	  if (i != currentPlayer)
        -:  728:	    {
    #####:  729:	      for (j = 0; j < state->handCount[i]; j++)
        -:  730:		{
    #####:  731:		  if (state->hand[i][j] == copper)
        -:  732:		    {
    #####:  733:		      discardCard(j, i, state, 0);
    #####:  734:		      break;
        -:  735:		    }
    #####:  736:		  if (j == state->handCount[i])
        -:  737:		    {
    #####:  738:		      for (k = 0; k < state->handCount[i]; k++)
        -:  739:			{
        -:  740:			  if (DEBUG)
        -:  741:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  742:			}	
    #####:  743:		      break;
        -:  744:		    }		
        -:  745:		}
        -:  746:					
        -:  747:	    }
        -:  748:				
        -:  749:	}				
        -:  750:
        -:  751:      //discard played card from hand
    #####:  752:      discardCard(handPos, currentPlayer, state, 0);	
    #####:  753:	return 0;	  
        -:  754:}
        -:  755:
    #####:  756:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  757:{
        -:  758:  int i;
        -:  759:  int j;
        -:  760:  int k;
    #####:  761:  k = 0;
        -:  762:  int x;
        -:  763:  int index;
    #####:  764:  int currentPlayer = whoseTurn(state);
    #####:  765:  int nextPlayer = currentPlayer + 1;
        -:  766:
    #####:  767:  int tributeRevealedCards[2] = {-1, -1};
        -:  768:  int temphand[MAX_HAND];// moved above the if statement
    #####:  769:  int drawntreasure=0;
        -:  770:  int cardDrawn;
    #####:  771:  int z = 0;// this is the counter for the temp hand
    #####:  772:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  773:    nextPlayer = 0;
        -:  774:  }
        -:  775:  
        -:  776:	
        -:  777:  //uses switch to select card and perform actions
    #####:  778:  switch( card ) 
        -:  779:    {
        -:  780:    case adventurer:
    #####:  781:	cardDrawn = 0;
    #####:  782:     return adventurer_func(&drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        -:  783:
        -:  784:			
        -:  785:    case council_room:
        -:  786:      //+4 Cards
    #####:  787:      for (i = 0; i < 4; i++)
        -:  788:	{
    #####:  789:	  drawCard(currentPlayer, state);
        -:  790:	}
        -:  791:			
        -:  792:      //+1 Buy
    #####:  793:      state->numBuys++;
        -:  794:			
        -:  795:      //Each other player draws a card
    #####:  796:      for (i = 0; i < state->numPlayers; i++)
        -:  797:	{
    #####:  798:	  if ( i != currentPlayer )
        -:  799:	    {
    #####:  800:	      drawCard(i, state);
        -:  801:	    }
        -:  802:	}
        -:  803:			
        -:  804:      //put played card in played card pile
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case feast:
        -:  810:      //gain card with cost up to 5
        -:  811:      //Backup hand
    #####:  812:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  813:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  814:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  815:      }
        -:  816:      //Backup hand
        -:  817:
        -:  818:      //Update Coins for Buy
    #####:  819:      updateCoins(currentPlayer, state, 5);
    #####:  820:      x = 1;//Condition to loop on
    #####:  821:      while( x == 1) {//Buy one card
    #####:  822:	if (supplyCount(choice1, state) <= 0){
        -:  823:	  if (DEBUG)
        -:  824:	    printf("None of that card left, sorry!\n");
        -:  825:
        -:  826:	  if (DEBUG){
        -:  827:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  828:	  }
        -:  829:	}
    #####:  830:	else if (state->coins < getCost(choice1)){
    #####:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
        -:  836:	}
        -:  837:	else{
        -:  838:
        -:  839:	  if (DEBUG){
        -:  840:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:	  }
        -:  842:
    #####:  843:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  844:	  x = 0;//No more buying cards
        -:  845:
        -:  846:	  if (DEBUG){
        -:  847:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  848:	  }
        -:  849:
        -:  850:	}
        -:  851:      }     
        -:  852:
        -:  853:      //Reset Hand
    #####:  854:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  855:	state->hand[currentPlayer][i] = temphand[i];
    #####:  856:	temphand[i] = -1;
        -:  857:      }
        -:  858:      //Reset Hand
        -:  859:      			
    #####:  860:      return 0;
        -:  861:			
        -:  862:    case gardens:
    #####:  863:      return -1;
        -:  864:			
        -:  865:    case mine:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:		
    #####:  873:      if (choice2 > treasure_map || choice2 < curse)
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      gainCard(choice2, state, 2, currentPlayer);
        -:  884:
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:
        -:  888:      //discard trashed card
    #####:  889:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  890:	{
    #####:  891:	  if (state->hand[currentPlayer][i] == j)
        -:  892:	    {
    #####:  893:	      discardCard(i, currentPlayer, state, 0);			
    #####:  894:	      break;
        -:  895:	    }
        -:  896:	}
        -:  897:			
    #####:  898:      return 0;
        -:  899:			
        -:  900:    case remodel:
    #####:  901:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  902:
    #####:  903:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      gainCard(choice2, state, 0, currentPlayer);
        -:  909:
        -:  910:      //discard card from hand
    #####:  911:      discardCard(handPos, currentPlayer, state, 0);
        -:  912:
        -:  913:      //discard trashed card
    #####:  914:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  915:	{
    #####:  916:	  if (state->hand[currentPlayer][i] == j)
        -:  917:	    {
    #####:  918:	      discardCard(i, currentPlayer, state, 0);			
    #####:  919:	      break;
        -:  920:	    }
        -:  921:	}
        -:  922:
        -:  923:
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case smithy:
    #####:  927:      return smithy_func(currentPlayer, state, handPos);
        -:  928:		
        -:  929:    case village:
    #####:  930:      return village_func(currentPlayer, state, handPos);
        -:  931:		
        -:  932:    case baron:
    #####:  933:      state->numBuys++;//Increase buys by 1!
    #####:  934:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  935:	int p = 0;//Iterator for hand!
    #####:  936:	int card_not_discarded = 1;//Flag for discard set!
    #####:  937:	while(card_not_discarded){
    #####:  938:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  939:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  940:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  941:	    state->discardCount[currentPlayer]++;
    #####:  942:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  943:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  944:	    }
    #####:  945:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:	    state->handCount[currentPlayer]--;
    #####:  947:	    card_not_discarded = 0;//Exit the loop
        -:  948:	  }
    #####:  949:	  else if (p > state->handCount[currentPlayer]){
        -:  950:	    if(DEBUG) {
        -:  951:	      printf("No estate cards in your hand, invalid choice\n");
        -:  952:	      printf("Must gain an estate if there are any\n");
        -:  953:	    }
    #####:  954:	    if (supplyCount(estate, state) > 0){
    #####:  955:	      gainCard(estate, state, 0, currentPlayer);
    #####:  956:	      state->supplyCount[estate]--;//Decrement estates
    #####:  957:	      if (supplyCount(estate, state) == 0){
    #####:  958:		isGameOver(state);
        -:  959:	      }
        -:  960:	    }
    #####:  961:	    card_not_discarded = 0;//Exit the loop
        -:  962:	  }
        -:  963:			    
        -:  964:	  else{
    #####:  965:	    p++;//Next card
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:			    
        -:  970:      else{
    #####:  971:	if (supplyCount(estate, state) > 0){
    #####:  972:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  973:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  974:	  if (supplyCount(estate, state) == 0){
    #####:  975:	    isGameOver(state);
        -:  976:	  }
        -:  977:	}
        -:  978:      }
        -:  979:	    
        -:  980:      
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case great_hall:
    #####:  984:      return greathall_func(currentPlayer, state, handPos);
        -:  985:		
        -:  986:    case minion:
        -:  987:      //+1 action
    #####:  988:      state->numActions++;
        -:  989:			
        -:  990:      //discard card from hand
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:			
    #####:  993:      if (choice1)		//+2 coins
        -:  994:	{
    #####:  995:	  state->coins = state->coins + 2;
        -:  996:	}
        -:  997:			
    #####:  998:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  999:	{
        -: 1000:	  //discard hand
    #####: 1001:	  while(numHandCards(state) > 0)
        -: 1002:	    {
    #####: 1003:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1004:	    }
        -: 1005:				
        -: 1006:	  //draw 4
    #####: 1007:	  for (i = 0; i < 4; i++)
        -: 1008:	    {
    #####: 1009:	      drawCard(currentPlayer, state);
        -: 1010:	    }
        -: 1011:				
        -: 1012:	  //other players discard hand and redraw if hand size > 4
    #####: 1013:	  for (i = 0; i < state->numPlayers; i++)
        -: 1014:	    {
    #####: 1015:	      if (i != currentPlayer)
        -: 1016:		{
    #####: 1017:		  if ( state->handCount[i] > 4 )
        -: 1018:		    {
        -: 1019:		      //discard hand
    #####: 1020:		      while( state->handCount[i] > 0 )
        -: 1021:			{
    #####: 1022:			  discardCard(handPos, i, state, 0);
        -: 1023:			}
        -: 1024:							
        -: 1025:		      //draw 4
    #####: 1026:		      for (j = 0; j < 4; j++)
        -: 1027:			{
    #####: 1028:			  drawCard(i, state);
        -: 1029:			}
        -: 1030:		    }
        -: 1031:		}
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}
    #####: 1035:      return 0;
        -: 1036:		
        -: 1037:    case steward:
    #####: 1038:      if (choice1 == 1)
        -: 1039:	{
        -: 1040:	  //+2 cards
    #####: 1041:	  drawCard(currentPlayer, state);
    #####: 1042:	  drawCard(currentPlayer, state);
        -: 1043:	}
    #####: 1044:      else if (choice1 == 2)
        -: 1045:	{
        -: 1046:	  //+2 coins
    #####: 1047:	  state->coins = state->coins + 2;
        -: 1048:	}
        -: 1049:      else
        -: 1050:	{
        -: 1051:	  //trash 2 cards in hand
    #####: 1052:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1053:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1054:	}
        -: 1055:			
        -: 1056:      //discard card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	  state->deckCount[nextPlayer]--;
        -: 1065:	}
    #####: 1066:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
        -: 1069:	}
        -: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
        -: 1077:	    
        -: 1078:      else{
    #####: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
    #####: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
        -: 1085:	  }
        -: 1086:			    
    #####: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
        -: 1095:      }    
        -: 1096:		       
    #####: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1099:	state->playedCardCount++;
    #####: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
    #####: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1109:	  drawCard(currentPlayer, state);
    #####: 1110:	  drawCard(currentPlayer, state);
        -: 1111:	}
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
        -: 1114:	}
        -: 1115:      }
        -: 1116:	    
    #####: 1117:      return 0;
        -: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
        -: 1123:	{
    #####: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
    #####: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
    #####: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
    #####: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
        -: 1137:	    }
        -: 1138:	}
    #####: 1139:      if (j < choice2)
        -: 1140:	{
    #####: 1141:	  return -1;				
        -: 1142:	}
        -: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1146:
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
        -: 1164:	{
    #####: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
    #####: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1168:		{
    #####: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
        -: 1171:		}
        -: 1172:	    }
        -: 1173:	}			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:	  //Function call for my created cutpurse function
    #####: 1179:      return cutpurse_func(currentPlayer, state, handPos, k);
        -: 1180:
        -: 1181:		
        -: 1182:    case embargo: 
        -: 1183:      //+2 Coins
    #####: 1184:      state->coins = state->coins + 2;
        -: 1185:			
        -: 1186:      //see if selected pile is in play
    #####: 1187:      if ( state->supplyCount[choice1] == -1 )
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:			
        -: 1192:      //add embargo token to selected supply pile
    #####: 1193:      state->embargoTokens[choice1]++;
        -: 1194:			
        -: 1195:      //trash card
    #####: 1196:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case outpost:
        -: 1200:      //set outpost flag
    #####: 1201:      state->outpostPlayed++;
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case salvager:
        -: 1208:      //+1 buy
    #####: 1209:      state->numBuys++;
        -: 1210:			
    #####: 1211:      if (choice1)
        -: 1212:	{
        -: 1213:	  //gain coins equal to trashed card
    #####: 1214:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1215:	  //trash card
    #####: 1216:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1217:	}
        -: 1218:			
        -: 1219:      //discard card
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:		
        -: 1223:    case sea_hag:
    #####: 1224:      for (i = 0; i < state->numPlayers; i++){
    #####: 1225:	if (i != currentPlayer){
    #####: 1226:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1227:	  state->discardCount[i]++;
    #####: 1228:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1229:	}
        -: 1230:      }
    #####: 1231:      return 0;
        -: 1232:		
        -: 1233:    case treasure_map:
        -: 1234:      //search hand for another treasure_map
    #####: 1235:      index = -1;
    #####: 1236:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:	{
    #####: 1238:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1239:	    {
    #####: 1240:	      index = i;
    #####: 1241:	      break;
        -: 1242:	    }
        -: 1243:	}
    #####: 1244:      if (index > -1)
        -: 1245:	{
        -: 1246:	  //trash both treasure cards
    #####: 1247:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1248:	  discardCard(index, currentPlayer, state, 1);
        -: 1249:
        -: 1250:	  //gain 4 Gold cards
    #####: 1251:	  for (i = 0; i < 4; i++)
        -: 1252:	    {
    #####: 1253:	      gainCard(gold, state, 1, currentPlayer);
        -: 1254:	    }
        -: 1255:				
        -: 1256:	  //return success
    #####: 1257:	  return 1;
        -: 1258:	}
        -: 1259:			
        -: 1260:      //no second treasure_map found in hand
    #####: 1261:      return -1;
        -: 1262:    }
        -: 1263:	
    #####: 1264:  return -1;
        -: 1265:}
        -: 1266:
        2: 1267:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1268:{
        -: 1269:	
        -: 1270:  //if card is not trashed, added to Played pile 
        2: 1271:  if (trashFlag < 1)
        -: 1272:    {
        -: 1273:      //add card to played pile
        2: 1274:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1275:      state->playedCardCount++;
        -: 1276:    }
        -: 1277:	
        -: 1278:  //set played card to -1
        2: 1279:  state->hand[currentPlayer][handPos] = -1;
        -: 1280:	
        -: 1281:  //remove card from player's hand
        2: 1282:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        2: 1287:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
        -: 1292:  else 	
        -: 1293:    {
        -: 1294:      //replace discarded card with last card in hand
        2: 1295:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1296:      //set last card to -1
        2: 1297:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1298:      //reduce number of cards in hand
        2: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
        -: 1301:	
        2: 1302:  return 0;
        -: 1303:}
        -: 1304:
        1: 1305:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1306:{
        -: 1307:  //Note: supplyPos is enum of choosen card
        -: 1308:	
        -: 1309:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1310:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1311:    {
    #####: 1312:      return -1;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //added card for [whoseTurn] current player:
        -: 1316:  // toFlag = 0 : add to discard
        -: 1317:  // toFlag = 1 : add to deck
        -: 1318:  // toFlag = 2 : add to hand
        -: 1319:
        1: 1320:  if (toFlag == 1)
        -: 1321:    {
    #####: 1322:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1323:      state->deckCount[player]++;
        -: 1324:    }
        1: 1325:  else if (toFlag == 2)
        -: 1326:    {
    #####: 1327:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1328:      state->handCount[player]++;
        -: 1329:    }
        -: 1330:  else
        -: 1331:    {
        1: 1332:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1333:      state->discardCount[player]++;
        -: 1334:    }
        -: 1335:	
        -: 1336:  //decrease number in supply pile
        1: 1337:  state->supplyCount[supplyPos]--;
        -: 1338:	 
        1: 1339:  return 0;
        -: 1340:}
        -: 1341:
       22: 1342:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1343:{
        -: 1344:  int i;
        -: 1345:	
        -: 1346:  //reset coin count
       22: 1347:  state->coins = 0;
        -: 1348:
        -: 1349:  //add coins for each Treasure card in player's hand
      132: 1350:  for (i = 0; i < state->handCount[player]; i++)
        -: 1351:    {
      110: 1352:      if (state->hand[player][i] == copper)
        -: 1353:	{
       76: 1354:	  state->coins += 1;
        -: 1355:	}
       34: 1356:      else if (state->hand[player][i] == silver)
        -: 1357:	{
    #####: 1358:	  state->coins += 2;
        -: 1359:	}
       34: 1360:      else if (state->hand[player][i] == gold)
        -: 1361:	{
    #####: 1362:	  state->coins += 3;
        -: 1363:	}	
        -: 1364:    }	
        -: 1365:
        -: 1366:  //add bonus
       22: 1367:  state->coins += bonus;
        -: 1368:
       22: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372:
        -: 1373://end of dominion.c
        -: 1374:
