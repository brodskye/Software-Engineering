        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Card test for the great hall function
        -:    2://This can be run multiple time by simply putting a for loop around where my testing is done, I did not do this so it was easier to grade.
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include <stdio.h>
        -:    6://Function to check if our tests passed or failed
        3:    7:void Pass_Fail(int check)
        -:    8:{
        3:    9:	if(check == 0)
        -:   10:	{
        2:   11:		printf(" Test PASSED succesfuly!\n");
        -:   12:	}
        -:   13:	else
        1:   14:		printf(" TEST FAILED\n");
        3:   15:}
        -:   16:
        1:   17:void Hall()
        -:   18:{
        -:   19://Generate a random seed
        1:   20:int seed = 500;
        -:   21:struct gameState game;
        -:   22://Cards needed for initialization
        1:   23:int cards[27] = {curse, estate, duchy, province, copper, silver, gold, adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall, minion, steward, tribute, ambassador, cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};
        -:   24://Initialize the game
        1:   25:initializeGame(2, cards, seed, &game);
        -:   26:
        1:   27:	printf("\n\nCARD TEST 3 GREAT HALL-------------------------------\n\n");
        -:   28:	//Get the initial number of actions and cards in the players deck and store them in temps for comparison later
        1:   29:	printf("\nCheck to see how many actions and cards the player has initially\n");
        1:   30:	printf("\n Player actions:%d\n", game.numActions);
        1:   31:	int temp1 = game.numActions;
        1:   32:	int temp2 = game.handCount[1];
        1:   33:	printf("\n Player cards:%d\n", game.handCount[1]);
        -:   34:	//Run the great hall function and make sure it was succesful
        1:   35:	printf("\nCheck to see if the Great Hall function runs succesfully\n");
        1:   36:	int rand = greathall_func(1, &game, 0);
        1:   37:	Pass_Fail(rand);
        -:   38:	//get our new action and card count
        1:   39:	printf("\nCheck to see how many actions and cards the player has after function call (player cards should not increase/decrease because the great hall card will get discarded, number of actions should increase by 1 :\n");
        1:   40:	printf("\n Player actions:%d\n", game.numActions);
        -:   41:	
        -:   42:	//Compare our old hand count and action values to the new ones and print an error if they are incorrect
        1:   43:	if(game.numActions > temp1 + 1)
        -:   44:	{
    #####:   45:	Pass_Fail(1);
        -:   46:	}
        -:   47:	else
        1:   48:	Pass_Fail(0);
        -:   49:	//Compare our old hand count and action values to the new ones and print an error if they are incorrect
        -:   50:	
        1:   51:	printf("\n Player cards:%d\n", game.handCount[1]);
        1:   52:	if(game.handCount[1] < temp2 || game.handCount[1] > temp2)
        -:   53:	{
        1:   54:	Pass_Fail(1);
        -:   55:	}	
        -:   56:	else
    #####:   57:	Pass_Fail(0);
        -:   58:	
        1:   59:	printf("\n\nCARD TEST 3 GREAT HALL END------------------------------\n\n");
        1:   60:}
        -:   61:
        1:   62:int main()
        -:   63:{
        1:   64:Hall();
        1:   65:return 0;
        -:   66:}
